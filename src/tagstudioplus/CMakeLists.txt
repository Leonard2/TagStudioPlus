project(TagStudioPlus)

include(${CMAKE_SOURCE_DIR}/cmake/PythonCMakeConfig.cmake)


# Get the Shiboken generator as a target.
module_target(ShibokenGen "shiboken6_generator")
module_program(ShibokenGen "shiboken6")
module_include(ShibokenGen) # Needed for the imported library target.

# Generate Shiboken binding files.
set(BINDINGS_INPUT
    "${CMAKE_CURRENT_SOURCE_DIR}/cppswitch.h")
set(BINDINGS_OUTDIR "${CMAKE_CURRENT_BINARY_DIR}/bindings")
set(BINDINGS_OUTPUT
    "${BINDINGS_OUTDIR}/tagstudioplus/tagstudioplus_module_wrapper.cpp"
    "${BINDINGS_OUTDIR}/tagstudioplus/cppswitch_wrapper.cpp")
add_custom_command(
    COMMENT "Running Shiboken generator on bindings."
    DEPENDS
        "${CMAKE_CURRENT_SOURCE_DIR}/bindings.xml"
        ${BINDINGS_INPUT}
    COMMAND ShibokenGenExe
        "--generator-set=shiboken"
        "--avoid-protected-hack"
        "--use-global-header"
        "--output-directory=${BINDINGS_OUTDIR}"
        "-T${CMAKE_CURRENT_SOURCE_DIR}"
        "-I${CMAKE_CURRENT_SOURCE_DIR}"
        ${BINDINGS_INPUT}
        "${CMAKE_CURRENT_SOURCE_DIR}/bindings.xml"
    OUTPUT ${BINDINGS_OUTPUT})

# Get Shiboken library as a target.
module_target(Shiboken "shiboken6")
module_library(Shiboken "shiboken6")
set_target_properties(ShibokenLib
    PROPERTIES
        # As of 6.8.2.1, Shiboken uses a Python 3.8.0 limited API.
        INTERFACE_COMPILE_DEFINITIONS "Py_LIMITED_API=0x03080000"
        INTERFACE_INCLUDE_DIRECTORIES ${ShibokenGen_INCLUDE_DIR})
target_link_libraries(ShibokenLib INTERFACE Python3::SABIModule)

# Create our bindings target.
set(BINDLIBTYPE "STATIC")
if(BUILD_SHARED_LIBS)
    set(BINDLIBTYPE "MODULE")
endif()
add_library(TagStudioPlusBindings ${BINDLIBTYPE} ${BINDINGS_OUTPUT})
target_link_libraries(TagStudioPlusBindings PUBLIC ShibokenLib)
target_include_directories(TagStudioPlusBindings
    PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}
    PUBLIC
        "${BINDINGS_OUTDIR}/tagstudioplus")

# Main executable.
file(GLOB_RECURSE TSPLUS_SRC
    CONFIGURE_DEPENDS
    "${CMAKE_CURRENT_SOURCE_DIR}/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

add_executable(${PROJECT_NAME} ${TSPLUS_SRC})
add_dependencies(${PROJECT_NAME} TagStudio)
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_link_libraries(${PROJECT_NAME}
    PRIVATE
        ShibokenLib
        TagStudioPlusBindings)
set_target_properties(${PROJECT_NAME}
    PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")

if (WIN32)
    string(
        APPEND GENEX_DLLS
        "$<JOIN:"
            "$<LIST:TRANSFORM,"
                "$<LIST:REMOVE_ITEM,"
                    "$<PATH:GET_FILENAME,"
                        "$<TARGET_RUNTIME_DLLS:${PROJECT_NAME}>"
                    ">,"
                    # Make an exception for the non-stable-interface module as the PyInstaller
                    # executable needs it and explicitly looks for it on startup.
                    "$<TARGET_FILE_NAME:Python3::Module>"
                ">,"
                "PREPEND,"
                "${CMAKE_BINARY_DIR}/bin/_internal/*"
            ">,"
            "\\;"
        ">")

    add_custom_command(TARGET ${PROJECT_NAME}
        POST_BUILD
        VERBATIM
        USES_TERMINAL
        COMMAND_EXPAND_LISTS
        # https://gitlab.kitware.com/cmake/cmake/-/issues/15461
        COMMENT "Copying DLL files to bin folder."
        COMMAND ${CMAKE_COMMAND}
            -E copy
            $<TARGET_RUNTIME_DLLS:${PROJECT_NAME}>
            $<TARGET_FILE_DIR:${PROJECT_NAME}>
        # Remove DLLs that are now duplicated inside the directory generated by PyInstaller.
        COMMAND ${CMAKE_COMMAND}
            -D "GLOBEX=${GENEX_DLLS}"
            -P "${CMAKE_SOURCE_DIR}/cmake/GlobRemove.cmake")
endif()
